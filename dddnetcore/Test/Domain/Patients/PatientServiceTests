using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using DDDSample1.Domain.Patients;
using DDDSample1.Domain.Shared;
using DDDSample1.Domain.Users;
using DDDSample1.Domain.Emails;
using DDDSample1.Domain.SystemLogs;
using Microsoft.AspNetCore.Mvc;
using Moq;
using Xunit;

namespace DDDSample1.Tests
{
    public class PatientServiceTests
    {
        private readonly Mock<IUnitOfWork> _mockUnitOfWork;
        private readonly Mock<IPatientRepository> _mockPatientRepository;
        private readonly Mock<IUserRepository> _mockUserRepository;
        private readonly Mock<IEmailService> _mockEmailService;
        private readonly Mock<IAnonymizedPatientDataRepository> _mockAnonymizedPatientDataRepository;
        private readonly Mock<ISystemLogRepository> _mockSystemLogRepository;
        private readonly Mock<AuthenticationService> _mockAuthenticationService;
        private readonly PatientService _patientService;

        public PatientServiceTests()
        {
            _mockUnitOfWork = new Mock<IUnitOfWork>();
            _mockPatientRepository = new Mock<IPatientRepository>();
            _mockUserRepository = new Mock<IUserRepository>();
            _mockEmailService = new Mock<IEmailService>();
            _mockAnonymizedPatientDataRepository = new Mock<IAnonymizedPatientDataRepository>();
            _mockSystemLogRepository = new Mock<ISystemLogRepository>();
            _mockAuthenticationService = new Mock<AuthenticationService>();

            _patientService = new PatientService(
                _mockUnitOfWork.Object,
                _mockPatientRepository.Object,
                _mockUserRepository.Object,
                _mockEmailService.Object,
                _mockAnonymizedPatientDataRepository.Object,
                _mockSystemLogRepository.Object,
                _mockAuthenticationService.Object
            );
        }

        [Fact]
        public async Task AddAsync_ShouldCreatePatient_WhenDataIsValid()
        {
            // Arrange
            var dto = new CreatingPatientDto
            {
                FirstName = "John",
                LastName = "Doe",
                FullName = "John Doe",
                Email = "john@example.com",
                PhoneNumber = "912345678",
                DateOfBirth = "12/04/2003",
                EmergencyContact = "987654321",
                Gender = "Male"
            };

            _mockPatientRepository.Setup(repo => repo.LastPatientCreatedAsync()).ReturnsAsync(null);
            _mockPatientRepository.Setup(repo => repo.AddAsync(It.IsAny<Patient>())).Returns(Task.CompletedTask);
            _mockUnitOfWork.Setup(uow => uow.CommitAsync()).ReturnsAsync(true);

            // Act
            var result = await _patientService.AddAsync(dto);

            // Assert
            Assert.NotNull(result);
            Assert.Equal("John", result.FirstName);
            _mockPatientRepository.Verify(repo => repo.AddAsync(It.IsAny<Patient>()), Times.Once);
            _mockUnitOfWork.Verify(uow => uow.CommitAsync(), Times.Once);
        }

        [Fact]
        public async Task EditPatientAsync_ShouldUpdatePatient_WhenDataIsValid()
        {
            // Arrange
            var patientId = "202310000001";
            var existingPatient = new Patient(
                new MedicalRecordNumber(patientId),
                new AppointmentHistory(""),
                new DateOfBirth(DateTime.Parse("1990-01-01")),
                new EmergencyContact("987654321"),
                Gender.MALE,
                new MedicalConditions(""),
                new PatientContactInformation(new PatientEmail("john@example.com"), new PatientPhone("912345678")),
                new PatientFirstName("John"),
                new PatientLastName("Doe"),
                new PatientFullName("John Doe"),
                null
            );

            var dto = new EditingPatientDto
            {
                FirstName = "Jane",
                LastName = "Doe",
                FullName = "Jane Doe",
                Email = "jane@example.com",
                PhoneNumber = "987654321",
                AppointmentHistory = "New history",
                MedicalConditions = "None"
            };

            _mockPatientRepository.Setup(repo => repo.GetByIdAsync(It.IsAny<MedicalRecordNumber>())).ReturnsAsync(existingPatient);
            _mockPatientRepository.Setup(repo => repo.UpdateAsync(It.IsAny<Patient>())).Returns(Task.CompletedTask);
            _mockUnitOfWork.Setup(uow => uow.CommitAsync()).ReturnsAsync(true);

            // Act
            var result = await _patientService.EditPatientAsync(patientId, dto);

            // Assert
            Assert.NotNull(result);
            Assert.Equal("Jane", result.FirstName);
            Assert.Equal("jane@example.com", result.Email);
            _mockPatientRepository.Verify(repo => repo.UpdateAsync(It.IsAny<Patient>()), Times.Once);
            _mockUnitOfWork.Verify(uow => uow.CommitAsync(), Times.Once);
        }

        [Fact]
        public async Task GetByIdAsync_ShouldReturnPatient_WhenIdExists()
        {
            // Arrange
            var patientId = new MedicalRecordNumber("202310000001");
            var existingPatient = new Patient(
                patientId,
                new AppointmentHistory(""),
                new DateOfBirth(DateTime.Parse("1990-01-01")),
                new EmergencyContact("987654321"),
                Gender.MALE,
                new MedicalConditions(""),
                new PatientContactInformation(new PatientEmail("john@example.com"), new PatientPhone("912345678")),
                new PatientFirstName("John"),
                new PatientLastName("Doe"),
                new PatientFullName("John Doe"),
                null
            );

            _mockPatientRepository.Setup(repo => repo.GetByIdAsync(patientId)).ReturnsAsync(existingPatient);

            // Act
            var result = await _patientService.GetByIdAsync(patientId);

            // Assert
            Assert.NotNull(result);
            Assert.Equal("John", result.FirstName);
            _mockPatientRepository.Verify(repo => repo.GetByIdAsync(patientId), Times.Once);
        }

        [Fact]
        public async Task GetByIdAsync_ShouldThrowException_WhenIdDoesNotExist()
        {
            // Arrange
            var patientId = new MedicalRecordNumber("202310000001");
            _mockPatientRepository.Setup(repo => repo.GetByIdAsync(patientId)).ReturnsAsync((Patient)null);

            // Act & Assert
            await Assert.ThrowsAsync<NullReferenceException>(async () => await _patientService.GetByIdAsync(patientId));
            _mockPatientRepository.Verify(repo => repo.GetByIdAsync(patientId), Times.Once);
        }
    }
}
