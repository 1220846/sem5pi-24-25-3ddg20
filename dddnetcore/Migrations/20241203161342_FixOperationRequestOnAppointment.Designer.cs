// <auto-generated />
using System;
using DDDSample1.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DDDNetCore.Migrations
{
    [DbContext(typeof(DDDSample1DbContext))]
    [Migration("20241203161342_FixOperationRequestOnAppointment")]
    partial class FixOperationRequestOnAppointment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DDDSample1.Domain.Appointments.Appointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OperationRequestId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OperationRequestId")
                        .IsUnique();

                    b.HasIndex("RoomNumber");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("DDDSample1.Domain.AppointmentsStaffs.AppointmentStaff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AppointmentId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StaffId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("StaffId");

                    b.ToTable("AppointmentsStaffs");
                });

            modelBuilder.Entity("DDDSample1.Domain.Categories.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DDDSample1.Domain.Families.Family", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MedicalRecordNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OperationTypeId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("OperationRequest");
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationTypes.OperationType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AnesthesiaTime")
                        .HasColumnType("int");

                    b.Property<int>("CleaningTime")
                        .HasColumnType("int");

                    b.Property<int>("EstimatedDuration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OperationTypeStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SurgeryTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OperationTypes");
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationTypesSpecializations.OperationTypeSpecialization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NumberOfStaff")
                        .HasColumnType("int");

                    b.Property<string>("OperationTypeId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SpecializationId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("OperationTypeId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("OperationTypesSpecializations");
                });

            modelBuilder.Entity("DDDSample1.Domain.Patients.AnonymizedPatientData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AgeRange")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("AnonymizedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("MedicalConditions")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AnonymizedPatientsData");
                });

            modelBuilder.Entity("DDDSample1.Domain.Patients.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmergencyContact")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MedicalConditions")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DDDSample1.Domain.Products.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DDDSample1.Domain.RoomTypes.RoomType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("DDDSample1.Domain.Specializations.Specialization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("DDDSample1.Domain.Staffs.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SpecializationId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("LicenseNumber")
                        .IsUnique();

                    b.HasIndex("SpecializationId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("DDDSample1.Domain.SystemLogs.SystemLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Entity")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("longtext");

                    b.Property<int>("Operation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SystemLogs");
                });

            modelBuilder.Entity("DDDSample1.Domain.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("dddnetcore.Domain.AvailabilitySlots.AvailabilitySlot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("StaffId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("AvailabilitySlots");
                });

            modelBuilder.Entity("dddnetcore.Domain.SurgeryRooms.SurgeryRoom", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AssignedEquipment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<string>("MaintenanceSlots")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<short>("RoomCapacity")
                        .HasColumnType("smallint");

                    b.Property<string>("RoomTypeId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("SurgeryRooms");
                });

            modelBuilder.Entity("DDDSample1.Domain.Appointments.Appointment", b =>
                {
                    b.HasOne("DDDSample1.Domain.OperationRequests.OperationRequest", "OperationRequest")
                        .WithOne()
                        .HasForeignKey("DDDSample1.Domain.Appointments.Appointment", "OperationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dddnetcore.Domain.SurgeryRooms.SurgeryRoom", "SurgeryRoom")
                        .WithMany()
                        .HasForeignKey("RoomNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationRequest");

                    b.Navigation("SurgeryRoom");
                });

            modelBuilder.Entity("DDDSample1.Domain.AppointmentsStaffs.AppointmentStaff", b =>
                {
                    b.HasOne("DDDSample1.Domain.Appointments.Appointment", "Appointment")
                        .WithMany("AppointmentStaffs")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DDDSample1.Domain.Staffs.Staff", "Staff")
                        .WithMany("AppointmentStaffs")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Appointment");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationTypesSpecializations.OperationTypeSpecialization", b =>
                {
                    b.HasOne("DDDSample1.Domain.OperationTypes.OperationType", "OperationType")
                        .WithMany("OperationTypeSpecializations")
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DDDSample1.Domain.Specializations.Specialization", "Specialization")
                        .WithMany("OperationTypeSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("OperationType");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("DDDSample1.Domain.Patients.Patient", b =>
                {
                    b.HasOne("DDDSample1.Domain.Users.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("DDDSample1.Domain.Patients.Patient", "Username");

                    b.OwnsOne("DDDSample1.Domain.Patients.PatientContactInformation", "ContactInformation", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Email");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("varchar(255)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("PatientId");

                            b1.HasIndex("PhoneNumber")
                                .IsUnique();

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.Navigation("ContactInformation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DDDSample1.Domain.Staffs.Staff", b =>
                {
                    b.HasOne("DDDSample1.Domain.Specializations.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDDSample1.Domain.Users.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("DDDSample1.Domain.Staffs.Staff", "Username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DDDSample1.Domain.Staffs.StaffContactInformation", "ContactInformation", b1 =>
                        {
                            b1.Property<string>("StaffId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Email");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("varchar(255)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("StaffId");

                            b1.HasIndex("PhoneNumber")
                                .IsUnique();

                            b1.ToTable("Staffs");

                            b1.WithOwner()
                                .HasForeignKey("StaffId");
                        });

                    b.Navigation("ContactInformation");

                    b.Navigation("Specialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dddnetcore.Domain.AvailabilitySlots.AvailabilitySlot", b =>
                {
                    b.HasOne("DDDSample1.Domain.Staffs.Staff", null)
                        .WithMany("AvailabilitySlots")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dddnetcore.Domain.SurgeryRooms.SurgeryRoom", b =>
                {
                    b.HasOne("DDDSample1.Domain.RoomTypes.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("DDDSample1.Domain.Appointments.Appointment", b =>
                {
                    b.Navigation("AppointmentStaffs");
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationTypes.OperationType", b =>
                {
                    b.Navigation("OperationTypeSpecializations");
                });

            modelBuilder.Entity("DDDSample1.Domain.Specializations.Specialization", b =>
                {
                    b.Navigation("OperationTypeSpecializations");
                });

            modelBuilder.Entity("DDDSample1.Domain.Staffs.Staff", b =>
                {
                    b.Navigation("AppointmentStaffs");

                    b.Navigation("AvailabilitySlots");
                });

            modelBuilder.Entity("DDDSample1.Domain.Users.User", b =>
                {
                    b.Navigation("Patient");

                    b.Navigation("Staff");
                });
#pragma warning restore 612, 618
        }
    }
}
