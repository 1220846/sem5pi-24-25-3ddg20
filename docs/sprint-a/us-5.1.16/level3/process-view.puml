@startuml level3

autonumber

actor "User" as UserP
participant "OperationRequestsController" as Controller <<Controller>>
participant "OperationRequestService" as Service <<Service>>
participant "Patient" as Patient <<Domain>>
participant "OperationRequest" as OperationRequest <<Domain>>
participant "OperationRequestDto" as OperationRequestDto <<Domain>>
database "IStaffRepository" as StaffRepository <<Domain>>
database "IOperationTypeRepository" as OperationTypeRepository <<Domain>>
database "IPatientRepository" as PatientRepository <<Domain>>
database "IOperationRequestRepository" as OperationRequestRepository <<Domain>>

activate UserP
UserP->Controller: POST /api/operationrequests
activate Controller

    Controller->Service:addOperationRequestAsync(operationRequestDto)
    activate Service

        Service -> StaffRepository:getByIdAsync(operationRequestDto.doctorID)
        activate StaffRepository

            StaffRepository-->Service:doctor
        deactivate StaffRepository
        
        Service -> OperationTypeRepository:getByIdAsync(operationRequestDto.operationTypeID)
        activate OperationTypeRepository

            OperationTypeRepository-->Service:operationType
        deactivate OperationTypeRepository

        alt doctor.specialization.OperationTypeSpecialization == operationType then
        
        Service -> PatientRepository:getByIdAsync(operationRequestDto.medicalRecordNumber)
        activate PatientRepository

            PatientRepository-->Service:patient
        deactivate PatientRepository

        opt patient==null
            Service-->Controller:BusinessRuleValidationException
        Controller-->UserP:404 Not Found
        end opt

        Service->OperationRequest:create(operationRequestDto.PatientId, operationRequestDto.doctorID, operationRequestDto.OperationTypeId, operationRequestDto.deadline, operationRequestDto.priority)
        activate OperationRequest

            OperationRequest-->Service:operationRequest
        deactivate OperationRequest

        Service->OperationRequestRepository:addAsync(operationRequest)
        activate OperationRequestRepository

            OperationRequestRepository-->Service:operationRequest
        deactivate OperationRequestRepository

        Service->Patient:updateAppointmentHistory(operationRequest)

        Service->PatientRepository:updateAsync(patient)
        activate PatientRepository

            PatientRepository-->Service:patient
        deactivate PatientRepository

        Service->OperationRequestDto:create(PatientId, DoctorId, OperationType,Deadline, Priority, Status)
        activate OperationRequestDto

            OperationRequestDto-->Service:operationRequestDto
        deactivate OperationRequestDto
        Service --> Controller:operationRequestDto

        UserP<--Controller:201 Created
        else
            Controller<--Service:BusinessRuleValidationException
        deactivate Service
        UserP<--Controller:403 Forbidden
    deactivate Controller


    end alt


@enduml